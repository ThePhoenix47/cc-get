local args = {...}

if #args < 2 then
	print("Usage:")
	print(fs.getName(shell.getRunningProgram()).." <volume> <path>")
	print("<volume> The name of the RAID volume to mount.")
	print("<path>   The path to mount the RAID volume to.")
	return
end

if not LyqydOS.fs.canMountToPath(shell.resolve(args[2])) then
	print("Cannot mount to path!")
	return
end

local driveRoot = shell.resolve(args[2])

--files table is keyed by path, value is textual file contents.  When these are changed, we re-generate the binary, binary striped versions and re-write it to the disks.
local files = {}
--binaryFiles table is keyed by path, value is table of binary file contents.  When this is changed, we re-generate the textual, binary striped versions and re-write it to the disks.
local binaryFiles = {}
--binarySplitFiles table is keyed by path, then drive index, values are tables of binary file contents, split out by stripe with parity bytes.
local binarySplitFiles = {}
--data table is keyed by drive index, values are tables of binary data, concatenated together from each file.
local data = {}
--directories table is keyed by path, no data but a "true" value.
local directories = nil
--paths table is numerically indexed, with path and size keys in each table value, or path and isDir keys for directories.
local paths = nil

local drives = {peripheral.find("drive")}
--arrayDrives table is keyed by ID, value is wrapped drive peripheral.
local arrayDrives = {}
local count, max = 0, 0

for i, drive in ipairs(drives) do
	if drive.isDiskPresent() then
		local label = drive.getDiskLabel()
		if label then
			local volume, id, total = string.match(label, "^(%w+): (%d+)/(%d+)")
			id = tonumber(id)
			if volume == args[1] then
				data[id] = {}
				if not arrayDrives[id] then count = count + 1 end
				arrayDrives[id] = drive
				max = math.max(max, tonumber(total))
				if not paths then
					local handle = io.open(fs.combine(drive.getMountPath(), "paths"), "r")
					if handle then
						paths = {}
						directories = {}
						for line in handle:lines() do
							local size, path = string.match(line, "(%d+), (.*)")
							if size and path then
								size = tonumber(size)
								table.insert(paths, {size = size, path = path})
							else
								local path = string.match(line, "dir: (.*)")
								if path then
									directories[path] = true
									table.insert(paths, {path = path, isDir = true})
								end
							end
						end
						handle:close()
					end
				end
			end
		end
	end
end

if not paths then
	print("Invalid array!")
	return
end

local function parityByteOfRow(n, max)
	return (max + 1) - ((n - 1) % max + 1)
end

for i, path in ipairs(paths) do
	--use max - 1 due to parity byte per row.
	if path.size then
		path.stripeCount = math.ceil(path.size / (max - 1))
		path.lastByte = path.size % (max - 1)
		if path.lastByte == 0 then path.lastByte = max - 1 end
		if path.lastByte >= parityByteOfRow(path.stripeCount, max) then path.lastByte = path.lastByte + 1 end
	end
end

local function binaryToText(path)
	--convert the binary representation of a file to its textual representation and write it to the table
	files[path] = string.char(unpack(binaryFiles[path]))
end

local function textToBinary(path)
	--convert the textual represntation of a file to its binary represenation and write it to the table
	binaryFiles[path] = {string.byte(files[path], 1, -1)}
end

local function splitBinary(path)
	--convert the binary file out to the several disk-specific tables, striping it and interlacing the parity bytes.
	local file = binaryFiles[path]
	if not binarySplitFiles[path] then binarySplitFiles[path] = {} end
	local stripe = 1
	for i = 1, #file, (max - 1) do
		--use -2 due to weird offset.
		local parity = parityByteOfRow(stripe, max)
		local parityValue
		for j = 0, max - 2 do
			local drive = j + 1
			if drive >= parity then drive = drive + 1 end
			if not binarySplitFiles[path][drive] then binarySplitFiles[path][drive] = {} end
			if file[i + j] then
				binarySplitFiles[path][drive][stripe] = file[i + j]
			else
				binarySplitFiles[path][drive][stripe] = 0
			end
			--calculate parity as we go
			if not parityValue then parityValue = binarySplitFiles[path][drive][stripe] else parityValue = bit.bxor(parityValue, binarySplitFiles[path][drive][stripe]) end
		end
		if not binarySplitFiles[path][parity] then binarySplitFiles[path][parity] = {} end
		binarySplitFiles[path][parity][stripe] = parityValue
		stripe = stripe + 1
	end
end

local function buildData()
	--build data table from striped binary files
	local newData = {}
	for i = 1, #paths do
		--only do non-directory path listings.
		if paths[i].size then
			local binStrDat = binarySplitFiles[paths[i].path]
			--loop across stripes
			for j = 1, max do
				--and then actual data length.
				if not newData[j] then newData[j] = {} end
				for k = 1, #binStrDat[j] do
					newData[j][#newData[j] + 1] = binStrDat[j][k]
				end
			end
		end
	end
	data = newData
end

local function doWritePathFile(path)
	--writes a paths file to a specific location, used in writePaths and writeData.
	local handle = io.open(fs.combine(path, "paths"), "w")
	if handle then
		for i, pData in ipairs(paths) do
			if pData.size then
				handle:write(tostring(pData.size)..", "..pData.path.."\n")
			elseif pData.isDir then
				handle:write("dir: "..pData.path.."\n")
			end
		end
		handle:close()
	end
end

local function writePaths()
	for i, drive in pairs(arrayDrives) do
		doWritePathFile(drive.getMountPath())
	end
end

local function doWriteData(id, drive)
	local handle = io.open(fs.combine(drive.getMountPath(), ".data"), "wb")
	if handle then
		for j = 1, #data[id] do
			handle:write(data[id][j])
		end
		handle:close()
	else
		print("Failed to write to disk "..id.."!")
	end
end

local function writeData()
	for i, drive in pairs(arrayDrives) do
		doWriteData(i, drive)
		doWritePathFile(drive.getMountPath())
	end
end

local recovery = false
local missingDrive

if max > 0 and paths then
	--theoretically, we've found the array
	if count < max then
		--but it's degraded
		if count < max - 1 then
			--it's hosed.
			print("Array Damaged!")
			print("Please make sure all "..max.." disks in the array are available.")
			print("Missing disks:")
			for i = 1, max do
				if not data[i] then term.write(tostring(i).." ") end
			end
			return
		end
		--it's recoverable, set flag.
		recovery = true
	end

	--array loading
	for i, drive in pairs(arrayDrives) do
		local dataCursor = 1
		if drive.isDiskPresent() then
			local handle = fs.open(fs.combine(drive.getMountPath(), ".data"), "rb")
			if handle then
				local byte = handle.read()
				while byte do
					data[i][dataCursor] = byte
					dataCursor = dataCursor + 1
					byte = handle.read()
				end
				handle.close()
			else
				print("Could not load disk "..i.."!")
			end
		else
			print("Disk "..i.." removed!")
		end
	end

	if recovery then
		--do recovery from degraded state.
		for i = 1, max do
			if not data[i] then
				--drive needing recovery
				data[i] = {}
				for j = 1, i == 1 and #data[2] or #data[1] do
					local byte = 0
					for k = 1, max do
						if k ~= i then
							bit.bxor(byte, data[k][j])
						end
					end
					data[i][j] = byte
				end
				missingDrive = i
				break
			end
		end
	end

	if missingDrive then
		print("Recovered data from missing drive "..tostring(missingDrive))
		print("Mounting Halted. Please provide a new disk to continue.")
		local aDrive = false
		while not aDrive do
			print("Side/Network name of drive holding new disk?")
			local newDrive = read()
			if peripheral.getType(newDrive) == "drive" then
				local drive = peripheral.wrap(newDrive)
				if drive.isDiskPresent() and drive.hasData() and #(fs.list(drive.getMountPath())) == 0 then
					--drive is present and contains a blank disk
					drive.setDiskLabel(args[1]..": "..missingDrive.."/"..max)
					aDrive = drive
				end
			end
		end
		doWriteData(missingDrive, aDrive)
	end


	local dataCursor = 1
	for i = 1, #paths do
		if paths[i].size then
			local file = {}
			local pathInfo = paths[i]
			for j = 1, pathInfo.stripeCount do
				local parity = parityByteOfRow(dataCursor, max)
				for k = 1, max do
					if k ~= parity then
						if j <= pathInfo.stripeCount or k <= pathInfo.lastByte then
							file[#file + 1] = data[k][dataCursor]
						end
					end
					--more raw, we do want the parity bytes here, as well as the extra padding bytes.
					local path = paths[i].path
					if not binarySplitFiles[path] then binarySplitFiles[path] = {} end
					if not binarySplitFiles[path][k] then binarySplitFiles[path][k] = {} end
					binarySplitFiles[path][k][j] = data[k][dataCursor]
				end
				dataCursor = dataCursor + 1
			end
			binaryFiles[pathInfo.path] = file
			binaryToText(pathInfo.path)
		end
	end
	--files should be set up now.
end

local mnt = {}
mnt.path = shell.resolve(args[2])
if string.sub(mnt.path, 1, 1) ~= "/" then mnt.path = "/"..mnt.path end
mnt.mount = {}

mnt.mount.list = function(path)
	if #path > 0 and string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	local results = {}
	for i = 1, #paths do
		if fs.getDir(paths[i].path) == path then
			table.insert(results, fs.getName(paths[i].path))
		end
	end
	return results
end

mnt.mount.exists = function(path)
	if string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	for i = 1, #paths do
		if paths[i].path == path then
			return true
		end
	end
	return false
end

mnt.mount.isDir = function(path)
	if string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	return directories[path] == true
end

mnt.mount.isReadOnly = function(path)
	return false
end

mnt.mount.getDrive = function(path)
	return "raid-"..args[1]
end

mnt.mount.getSize = function(path)
	if string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	return files[path] and #files[path] or 0
end

mnt.mount.getFreeSpace = function(path)
	local space = 0
	for i, drive in ipairs(drives) do
		space = space + fs.getFreeSpace(drive.getMountPath())
	end
	return space
end

mnt.mount.makeDir = function(path)
	if string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	directories[path] = true
	table.insert(paths, {path = path, isDir = true})
end

mnt.mount.find = function(mask)
	mask = string.gsub(mask, "%%", "%%%%")
	mask = string.gsub(mask, "([%^%$%(%)%%%.%[%]%+%-%?])", "%%%1")
	mask = string.gsub(mask, "(%*)", ".*")
	local matches = {}
	for i = 1, #paths do
		local match = string.match(paths[i].path, mask)
		if match then
			table.insert(matches, driveRoot..paths[i].path)
		end
	end
	return matches
end

	

mnt.mount.move = function(origin, destination)
	if string.sub(origin, 1, 1) ~= "/" then origin = "/"..origin end
	if string.sub(destination, 1, 1) ~= "/" then destination = "/"..destination end
	for i = 1, #paths do
		if paths[i].path == origin then
			paths[i].path = destination
			files[destination] = files[origin]
			files[origin] = nil
			binaryFiles[destination] = binaryFiles[origin]
			binaryFiles[origin] = nil
			binarySplitFiles[destination] = binarySplitFiles[origin]
			binarySplitFiles[origin] = nil
			writePaths()
			break
		end
	end
end

mnt.mount.copy = function(origin, destination)
	if string.sub(origin, 1, 1) ~= "/" then origin = "/"..origin end
	if string.sub(destination, 1, 1) ~= "/" then destination = "/"..destination end
	local originPath, destinationPath
	for i = 1, #paths do
		if paths[i].path == origin then
			originPath = paths[i]
		elseif paths[i].path == destination then
			destinationPath = paths[i]
		end
		if originPath and destinationPath then
			break
		end
	end
	if not destinationPath then
		destinationPath = {path = destination}
		table.insert(paths, destinationPath)
	end
	destinationPath.size = originPath.size
	files[destination] = files[origin]
	binaryFiles[destination] = binaryFiles[origin]
	binarySplitFiles[destination] = binarySplitFiles[origin]
	buildData()
	writeData()
end

mnt.mount.delete = function(path)
	if string.sub(path, 1, 1) ~= "/" then path = "/"..path end
	for i = 1, #paths do
		if paths[i].path == path then
			files[path] = nil
			binaryFiles[path] = nil
			binarySplitFiles[path] = nil
			table.remove(paths, i)
			buildData()
			writeData()
			break
		end
	end
end

mnt.mount.get = function(origin)
	if string.sub(origin, 1, 1) ~= "/" then origin = "/"..origin end
	return files[origin]
end

mnt.mount.put = function(data, destination)
	if string.sub(destination, 1, 1) ~= "/" then destination = "/"..destination end
	local destinationPath
	for i = 1, #paths do
		if paths[i].path == destination then
			destinationPath = paths[i]
		end
	end
	if not destinationPath then
		destinationPath = {path = destination}
		table.insert(paths, destinationPath)
	end

	files[destination] = data
	destinationPath.size = #files[destination]
	textToBinary(destination)
	splitBinary(destination)
	buildData()
	writeData()
end

table.insert(LyqydOS.fs.mounts, mnt)
