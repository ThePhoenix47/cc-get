local args = {...}

local function load(file)
	if shell.resolveProgram(file) then
		os.loadAPI(shell.resolveProgram(file))
	elseif fs.exists(fs.combine("/bin/cc-get/packages/lyqydnetlib", file)) then
		os.loadAPI(fs.combine("/bin/cc-get/packages/lyqydnetlib", file))
	else
		error("Could not load "..file.." API!")
	end
end

load("net")
load("packet")
load("connection")
load("netfile")
load("netscreen")

local function log(level, message)
	os.queueEvent("service_message", level, LyqydOS and process.id() or "lyqydnet", message)
end

--modread

local oldPeriphCall = peripheral.call
local oldPullRaw = os.pullEventRaw

if not process then
	peripheral.call = function(...)
		if not shell then
			print("up in ur rednet co")
			return false
			--our logic here, since this should be inside rednet coroutine
		else
			return oldPeriphCall(...)
		end
	end
end

local modemState = {}

local hostedProtocols = {}

local validSides = {}
for k, v in pairs(rs.getSides()) do
	validSides[v] = true
end

local function validateSide(side)
	if type(side) ~= "string" then
		error("string expected")
	end
	if not validSides[side] then
		error("Invalid side")
	end
	if peripheral.getType(side) ~= "modem" then	
		error("No modem on "..side.." side", 3)
	end
	return true
end

if not process then
	function rednet.open(side)
		if validateSide(side) then
			modemState[side] = true
			peripheral.call(side, "open", os.getComputerID())
			peripheral.call(side, "open", 65535)
		end
	end

	function rednet.close(side)
		if validateSide(side) then
			modemState[side] = false
			peripheral.call(side, "close", os.getComputerID())
			peripheral.call(side, "close", 65535)
		end
	end

	function rednet.isOpen(side)
		if side then
			if peripheral.getType(side) == "modem" then
				return modemState[side]
			end
		else
			for n, side in ipairs(peripheral.getNames()) do
				if rednet.isOpen(side) then
					return true
				end
			end
		end
	end

	function rednet.host(protocol, hostname)
		if type(protocol) ~= "string" or type(hostname) ~= "string" then
			error("expected string, string", 2)
		end
		if hostname == "localhost" then
			error("Reserved hostname", 2)
		end
		if hostedProtocols[protocol] ~= hostname then
			if not rednet.lookup(protocol, hostname) then
				error("Hostname in use", 2)
			end
			hostedProtocols[protocol] = hostname
		end
	end

	function rednet.unhost(protocol)
		if type(protocol) ~= "string" then
			error("expected string", 2)
		end
		hostedProtocols[protocol] = nil
	end

	function rednet.lookup(protocol, hostname)
		log("debug", "looking up p: "..protocol.." h: "..hostname)
		if type( protocol ) ~= "string" then
			error( "expected string", 2 )
		end

		local result
		if hostname == nil then
			result = {}
		end

		if hostedProtocols[protocol] then
			if hostname == nil then
				table.insert(result, os.getComputerID())
			elseif hostname == "localhost" or hostname == hostedProtocols[protocol] then
				return os.getComputerID()
			end
		end

		if not rednet.isOpen() then
			if result then
				unpack(result)
			end
			return nil
		end

		rednet.broadcast({sType = "lookup", sProtocol = protocol, sHostname = hostname,}, "dns")

		local timer = os.startTimer(2)
		while true do
			local event = {os.pullEvent()}
			if event[1] == "rednet_message" then
				if event[4] == "dns" and event[3].sType == "lookup response" then
					if event[3].sProtocol == protocol then
						if not hostname then
							table.insert(result, event[2])
						elseif event[3].sHostname == hostname then
							return event[2]
						end
					end
				end
			elseif event[1] == "timer" and event[2] == timer then
				break
			end
		end
		if result then
			return unpack(result)
		end
	end
end

function rednet.send(recipient, message, protocol)
	for _, side in pairs(rs.getSides()) do
		if peripheral.getType(side) == "modem" and rednet.isOpen(side) then
			if term.current then
				local pack = packet.new("RM", recipient, message)
				pack.protocol = protocol
				net.send(pack)
			else
				net.send(packet.new("RM", recipient, message))
			end
			return
		end
	end
	error("No open sides")
end

function rednet.broadcast(message, protocol)
	rednet.send(65535, message, protocol)
end

local rnReceivedMessages = {}
local rnReceivedTimeouts = {}

local function processModemMessage(event, filter)
	if type(event[5]) == "table" and event[5].lyqydnet then
		if event[5].confirm then
			net.send(packet.new("PS", event[4], event[5], 4, 4))
		end
		if event[5].destination ~= os.computerID() then
			event[5].side = event[2]
			coroutine.resume(net.daemonTable.netd, "lyqydnet_packet", event[5])
		elseif event[5].type == "RM" and (not filter or filter == "rednet_message") then
			if term.current then
				os.queueEvent("rednet_message", event[5].origin, event[5].payload, event[5].protocol)
				if event[5].protocol == "dns" and event[5].payload.sType == "lookup" then
					local hostname = hostedProtocols[event[5].payload.sProtocol]
					if hostname then
						rednet.send(event[4], {sType = "lookup response", sHostname = hostname, sProtocol = event[5].payload.sProtocol}, "dns")
					end
				end
			else
				os.queueEvent("rednet_message", event[5].origin, event[5].payload, 0)
			end
		else
			if event[5].toSock and net.socketTable[event[5].toSock] then
				--add interface name for netd.
				if event[5].toSock == 4 then event[5].side = event[2] end
				if net.socketTable[event[5].toSock] == coroutine.running() and (not filter or filter == "lyqydnet_packet") then
					os.queueEvent("lyqydnet_packet", event[5])
				else
					coroutine.resume(net.socketTable[event[5].toSock], "lyqydnet_packet", event[5])
				end
			end
		end
	else
		if type(event[5]) == "table" and event[5].nMessageID then
			if not rnReceivedMessages[event[5].nMessageID] then
				rnReceivedMessages[event[5].nMessageID] = true
				rnReceivedTimeouts[os.startTimer(30)] = event[5].nMessageID
			else
				return
			end
		end
		if modemState[event[2]] and (event[3] == os.computerID() or event[3] == 65535) then
			if not filter or filter == "rednet_message" then
				if term.current then
					os.queueEvent("rednet_message", event[4], event[5].message, event[5].sProtocol)
					if event[5].sProtocol == "dns" and event[5].message.sType == "lookup" then
						local hostname = hostedProtocols[event[5].message.sProtocol]
						if hostname then
							rednet.send(event[4], {sType = "lookup response", sHostname = hostname, sProtocol = event[5].message.sProtocol}, "dns")
						end
					end
				else
					os.queueEvent("rednet_message", event[4], event[5], event[6])
				end
			end
		elseif event[3] == 65533 then
			--assume we have opened it for a reason and pass along to netd.
			coroutine.resume(net.daemonTable.netd, "rednet_repeat", event[5])
		end
	end
end

if not process then
	function _G.os.pullEventRaw(filter)
		if getfenv(2).CHANNEL_REPEAT and getfenv(2).CHANNEL_BROADCAST then
			--in rednet coroutine, theoretically, so should run only once per event.
			while true do
				local event = {oldPullRaw()}
				if event[1] == "modem_message" then
					processModemMessage(event, filter)
				elseif event[1] == "timer" and event[2] == net.networkDaemonTimeout then
					coroutine.resume(net.daemonTable.netd, unpack(event))
				elseif event[1] == "timer" and rnReceivedTimeouts[event[2]] then
					rnReceivedMessages[rnReceivedTimeouts[event[2]]] = nil
					rnReceivedTimeouts[event[2]] = nil
				else
					if not filter or filter == event[1] then
						return unpack(event)
					end
				end
			end
		else
			return oldPullRaw(filter)
		end
	end
end

--begin netd functionality
local routing = false
local longlink = false
local forwardTable = {}
local endpointTable = {}
local infoWaitTable = {}
--used for forwarding RM packets, if term.current then store the ID so as to not repeat them.
local forwardedPacketIDs = {}
local forwardedPacketTimers = {}

if #args >= 1 then
	if args[1] == "route" then
		routing = true
		log("info", "routing enabled")
		--open rednet repeating channel.
		for side in pairs(net.modems) do
			peripheral.call(side, "open", 65533)
		end
		if args[2] and args[2] == "longlink" then
			longlink = true
			log("info", "longlink enabled")
		end
	end
end

local function readHosts()
	if fs.exists("/etc/hosts") then
		local file = io.open("/etc/hosts", "r" )
		local line = file:read()
		while line do
			net.add_route(string.match(line, "(%d+):"), string.match(line, ";([CTR])"), string.match(line, ";[CTR]%.?%a* ([^\n]+)"), string.match(line, ":(%d+),"), string.match(line, ",(%d+);"), string.match(line, ";[CTR]%.(%a+)"))
			line = file:read()
		end
		file:close()
	elseif not fs.isDir("/etc") then
		fs.makeDir("/etc")
	end
end

local function saveHosts()
	local file = io.open("/etc/hosts", "w" )
	if file then
		for rNum, rInfo in ipairs(net.routeTable) do
			if rInfo then
				file:write(rInfo.idNum..":"..rInfo.gateway..","..rInfo.cost..";"..rInfo.type.."."..rInfo.interface.." "..rInfo.name.."\n")
			end
		end
		file:close()
		return true
	end
	return false
end

local function saveForwardTable()
	local file = io.open( "etc/packets", "w" )
	if file then
		for pNum, pContents in ipairs( forwardTable ) do
			file:write( pContents.dest..">"..textutils.serialize(pContents.data).."\n" )
		end
		file:close()
		return true
	end
	return false
end

local function createHostTableString(exclude)
	local retStr = ""
	for rNum, rInfo in ipairs(net.routeTable) do
		if rInfo and rNum ~= exclude then
			retStr = retStr..rInfo.idNum..":"..os.computerID()..","..(rInfo.cost + 1)..";"..rInfo.type.." "..rInfo.name..">"
		end
	end
	return retStr
end

local function testEquality(p1, p2)
	if p1 == p2 then return true end
	if type(p1) ~= "table" then return false end
	for k1, v1 in pairs(p1) do
		local v2 = p2[k1]
		if not testEquality(v1, v2) then return false end
	end
	for k2, v2 in pairs(p2) do
		local v1 = p1[k2]
		if not testEquality(v1, v2) then return false end
	end
	return true
end

local function createHostTable(exclude)
	local hostTable = {}
	for rNum, rInfo in ipairs(net.routeTable) do
		if rInfo and rNum ~= exclude then
			local infoTable = {
				id = rInfo.idNum,
				gateway = os.computerID(),
				cost = rInfo.cost + 1,
				type = rInfo.type,
				label = rInfo.name,
			}
			table.insert(hostTable, infoTable)
		end
	end
	table.insert(hostTable, {id = os.computerID(), gateway = -1, cost = 0, type = "R", label = os.getComputerLabel()})
	return hostTable
end

function netDaemon()
	log("info", "reading hosts")
	readHosts()
	log("info", "read "..#net.routeTable.." hosts")
	while true do
		local event = {coroutine.yield()}
		if event[1] == "lyqydnet_packet" then
			log("info", "lyqydnet "..event[2].type.." packet received from "..event[2].origin)
			local pack = event[2]
			if pack.type == "HA" then
				local newRoute = net.add_route(pack.origin, pack.payload.type, pack.payload.label, -1, 0, pack.side)
				saveHosts()
				log("info", "saved hosts")
				if routing then 
					log("info", "sending HT to "..pack.origin)
					net.send(packet.new("HT", pack.origin, createHostTable(newRoute), 4, 4))
					local hostData = {
						id = pack.origin,
						gateway = os.computerID(),
						--if we have arrived at this code, cost must be 1, 0 + 1.
						cost = 1,
						type = pack.payload.type,
						label = pack.payload.label,
					}
					--pass the new host information on to other routers as well as nearby hosts.
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type == "R" and rNum ~= newRoute then
							log("info", "sending HI to "..rInfo.idNum)
							net.send(packet.new("HI", rInfo.idNum, hostData, 4, 4))
						elseif rInfo and rInfo.type ~= "R" and rNum ~= newRoute and rInfo.cost == 0 then
							log("info", "sending HI to "..rInfo.idNum)
							net.send(packet.new("HI", rInfo.idNum, hostData, 4, 4))
						end
					end
					--if the computer coming online was a router that didn't respond to a forwarded packet, forward the packet again.
					for pNum, pContents in ipairs(forwardTable) do
						if pContents.dest == pack.origin then
							log("info", "re-sending packet to "..pack.origin)
							net.raw_send(net.routeTable[net.getRouteFromCID(pack.origin)].interface, pack.origin, pContents.data)
						end
					end
					--if the computer coming online was an endpoint, send on data for it.
					for pNum, pContents in ipairs(infoWaitTable) do
						if pContents.dest == pack.origin then
							log("info", "re-sending endpoint packet to "..pack.origin)
							net.raw_send(net.routeTable[net.getRouteFromCID(pack.origin)].interface, pack.origin, pContents.data)
						end
					end
				end
			elseif pack.type == "HI" then
				local routeNum = net.add_route(pack.payload.id, pack.payload.type, pack.payload.label, pack.payload.gateway, pack.payload.cost, pack.side)
				saveHosts()
				log("info", "saved hosts")
				if routing then
					local hostData = {
						id = pack.payload.id,
						gateway = os.computerID(),
						cost = net.routeTable[routeNum].cost + 1,
						type = pack.payload.type,
						label = pack.payload.label,
					}

					for _, host in ipairs(infoWaitTable) do
						if pack.payload.id == host then
							--this was a dropped host we'd been waiting on info for.
							table.remove(infoWaitTable, _)
							--update and correct nearby hosts.
							for rNum, rInfo in ipairs(net.routeTable) do
								if rInfo and rInfo.type ~= "R" and rInfo.idNum ~= host and rInfo.cost == 0 then
									log("info", "sending HC update to "..rInfo.idNum)
									net.send(packet.new("HC", rInfo.idNum, hostData, 4, 4))
								end
							end
							break
						end
					end
					--also update nearby hosts about the potentially new route.
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type ~= "R" and rNum ~= routeNum and rInfo.cost == 0 then
							log("info", "sending HI to "..rInfo.idNum)
							net.send(packet.new("HI", rInfo.idNum, hostData, 4, 4))
						end
					end
				end
			elseif pack.type == "HC" then
				local routeNum = net.add_route(pack.payload.id, pack.payload.type, pack.payload.label, pack.payload.gateway, pack.payload.cost)
				net.routeTable[routeNum].gateway, net.routeTable[routeNum].cost, net.routeTable[routeNum].name, net.routeTable[routeNum].interface = pack.payload.gateway, pack.payload.cost, pack.payload.label, pack.side
				saveHosts()
				log("info", "saved hosts")
			elseif pack.type == "HQ" then
				if (pack.payload.label and pack.payload.label == os.getComputerLabel()) or (pack.payload.id and pack.payload.id == os.computerID()) then
					local body = {
						label = os.getComputerLabel(),
						type = turtle and "T" or (routing and "R" or "C"),
					}
					log("info", "broadcasting HA in response")
					net.raw_send(pack.side, 65535, packet.new("HA", 65535, body, 4, 4))
				elseif routing then
					log("info", "sending HQ to see if host is in range")
					if pack.payload.label then
						local route = net.routeFromName(pack.payload.label)
						net.raw_send(net.routeTable[route].interface, net.CIDFromRoute(route), pack)
						net.remove_route(route)
					elseif pack.payload.id then
						net.raw_send(net.routeTable[tonumber(pack.payload.id)].interface, tonumber(pack.payload.id), pack)
						net.remove_route(net.routeFromCID(pack.payload.id))
					end
				else
					log("info", "removing host")
					if pack.payload.label then
						net.remove_route(net.routeFromName(pack.payload.label))
					elseif pack.payload.id then
						net.remove_route(net.routeFromCID(pack.payload.id))
					end
				end
			elseif pack.type == "HR" then
				--host removal.
				local routeNum = net.routeFromCID(pack.payload)
				if routeNum then
					log("info", "removing route for id "..net.routeTable[routeNum].idNum)
					net.remove_route(routeNum)
					for cNum, cInfo in pairs(connection.connectionTable) do
						if cInfo and cInfo.remote == pack.payload then
							connection.connectionTable[cNum] = false
						end
					end
					if routing then
						for rNum, rInfo in ipairs(net.routeTable) do
							if rInfo and rInfo.cost == 0 and rInfo.type ~= "R" then
								--send HR packet to all close non-routers.
								log("info", "sending HR to "..rInfo.idNum)
								net.raw_send(rInfo.interface, rInfo.idNum, pack)
								break
							end
						end
					end
				end
				saveHosts()
			elseif pack.type == "HT" then
				for _, hostInfo in ipairs(pack.payload) do
					net.add_route(hostInfo.id, hostInfo.type, hostInfo.label, hostInfo.gateway, hostInfo.cost, pack.side)
				end
				saveHosts()
				log("info", "saved hosts")
			elseif routing and pack.type ~= "SI" and pack.destination ~= os.computerID() then
				--we are forwarding a packet to another computer.
				if pack.type == "HI" or pack.type == "HC" then
					--these are host information packets and must be manipulated to ensure correct information.
					pack.payload.gateway = os.computerID()
					pack.payload.cost = pack.payload.cost + 1
				end
				if longlink then
					pack.confirm = true
					log("info", "adding packet to forward table")
					table.insert(forwardTable, {dest = pack.destination, data = pack})
					saveForwardTable()
					log("info", "saved forward table")
				end
				if net.routeTable[net.routeFromCID(pack.destination)].cost == 0 then
					--endpoint confirmation
					pack.confirm = true
					log("info", "adding packet to forward table")
					table.insert(endpointTable, {dest = pack.destination, data = pack})
					net.networkDaemonTimeout = os.startTimer(2)
					log("info", "queued timer id "..net.networkDaemonTimeout.." for netDaeTime")
				end
				if not net.send(pack, longlink) then
					log("info", "packet to "..pack.destination.." failed, sending RR")
					net.send(packet.new("RR", pack.origin, "not_found"))
				end
			elseif pack.type == "PS" then
				--packet success confirmation
				for pNum, pContents in ipairs(forwardTable) do
					if testEquality(pContents.data, pack.payload) then
						log("info", "forwarded packet found, removing")
						table.remove(forwardTable, pNum)
						break
					end
				end
				saveForwardTable()
				log("info", "saved foward table")
				for pNum, pContents in ipairs(endpointTable) do
					if testEquality(pContents.data, pack.payload) then
						log("info", "endpoint packet found, removing")
						table.remove(endpointTable, pNum)
						break
					end
				end
			elseif pack.type == "SI" then
				--instruction
				local instruction = type(pack.payload) == "table" and pack.payload.instruction or pack.payload
				if instruction == "route" then
					log("info", "routing enabled")
					routing = true
					--open rednet repeating channel.
					for side in pairs(net.modems) do
						peripheral.call(side, "open", 65533)
					end
				elseif instruction == "longlink" then
					longlink = true
					log("info", "longlink enabled")
				elseif instruction == "announce" then
					if os.getComputerLabel() then
						log("info", "announcing")
						local body = {
							label = os.getComputerLabel(),
							type = turtle and "T" or (routing and "R" or "C"),
						}
						local pack = packet.new("HA", 65535, body, 4, 4)
						for side in pairs(net.modems) do
							net.raw_send(side, 65535, pack)
						end
					else
						log("warning", "no computer label")
					end
				elseif instruction == "turtlepacket" then
					table.insert(endpointTable, {dest = pack.payload.data.destination, data = pack.payload.data})
					net.networkDaemonTimeout = os.startTimer(2)
					log("info", "queued timer id "..net.networkDaemonTimeout.." for netDaeTime")
				end
			end
		elseif event[1] == "rednet_repeat" then
			if not forwardedPacketIDs[event[2].nMessageID] then
				log("info", "rednet repeating #"..event[2].nMessageID)
				forwardedPacketIDs[event[2].nMessageID] = true
				forwardedPacketTimers[os.startTimer(30)] = event[2].nMessageID
				for side in pairs(net.modems) do
					net.raw_send(side, event[2].nRecipient, event[2])
					net.raw_send(side, 65533, event[2])
				end
			end
		elseif event[1] == "timer" then
			if event[2] == net.networkDaemonTimeout then
				log("info", "network daemon timeout timer")
				for hNum, hContents in ipairs(infoWaitTable) do
					log("info", "sending HR for id "..hContents.dest)
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type ~= "R" then
							net.send(packet.new("HR", rInfo.idNum, hContents.dest, 4, 4))
						end
					end
				end
				log("info", "reset infoWaitTable")
				infoWaitTable = {}
				for pNum, pContents in ipairs(endpointTable) do
					log("info", "send HQ for id "..pContents.dest)
					for rNum, rInfo in ipairs(net.routeTable) do
						if rInfo and rInfo.type == "R" then
							net.send(packet.new("HQ", rInfo.idNum, {id = pContents.dest}, 4, 4))
						end
					end
					net.send(packet.new("HQ", pContents.dest, {id = pContents.dest}, 4, 4))
					net.remove_route(net.routeFromCID(pContents.dest))
					saveHosts()
					log("info", "saved hosts")
					table.insert(infoWaitTable, {dest = pContents.dest, data = pContents.data})
					net.networkDaemonTimeout = os.startTimer(2)
				end
				log("info", "reset endpointTable")
				endpointTable = {}
			elseif forwardedPacketTimers[event[2]] then
				log("info", "reset rednet repeated #"..forwardedPacketIDs[forwardedPacketTimers[event[2]]])
				forwardedPacketIDs[forwardedPacketTimers[event[2]]] = nil
				forwardedPacketTimers[event[2]] = nil
			end
		end
	end
end



if process and process.id() then
	--if run in lyqydos, set up correct processes.
	local nd = process.new(netDaemon, "netd")
	net.daemonTable.netd = nd.thread
	net.socketTable[4] = net.daemonTable.netd
	net.netInit()

	local function pidFromThread(thread)
		for pNum, pInfo in pairs(process.list) do
			if pInfo and pInfo.thread == thread then return pNum end
		end
	end

	while true do
		local event = {os.pullEventRaw()}
		if event[1] == "modem_message" then
			for pNum, pInfo in ipairs(process.list) do
				if pInfo and pInfo.modem and pInfo.modem[event[2]] and pInfo.modem[event[2]][event[3]] then
					if pInfo.name ~= "lrnd" and pInfo.name ~= "lyqydnet" then
						pInfo:queue(unpack(event))
					end
				end
			end
			if event[3] == os.getComputerID() or event[3] == 65535 and (type(event[5]) ~= "table" or not event[5].lyqydnet or event[5].type ~= "RM") then
				if type(event[5]) == "table" and event[5].nMessageID then
					if not rnReceivedMessages[event[5].nMessageID] then
						rnReceivedMessages[event[5].nMessageID] = true
						rnReceivedTimeouts[os.startTimer(30)] = event[5].nMessageID
						for pNum, pInfo in pairs(process.list) do
							if pInfo and pInfo.rednet and pInfo.rednet[event[2]] then
								if term.current then
									pInfo:queue("rednet_message", event[4], event[5].message, event[5].sProtocol)
								else
									pInfo:queue("rednet_message", event[4], event[5], event[6])
								end
							end
						end
						if event[5].sProtocol == "dns" and event[5].message.sType == "lookup" then
							for pID, proc in ipairs(process.list) do
								if proc and proc.rednet and proc.rednet.hosting then
									local hostname = proc.rednet.hosting[event[5].message.sProtocol]
									if hostname then
										rednet.send(event[4], {sType = "lookup response", sHostname = hostname, sProtocol = event[5].message.sProtocol}, "dns")
										break
									end
								end
							end
						end
					end
				end
			end
			if type(event[5]) == "table" and event[5].lyqydnet then
				if event[5].type == "RM" and (event[5].destination == os.getComputerID() or event[5].destination == 65535) then
					--copied from lrnd
					for pNum, pInfo in pairs(process.list) do
						if pInfo and pInfo.rednet and pInfo.rednet[event[2]] then
							if term.current then
								pInfo:queue("rednet_message", event[5].origin, event[5].payload, event[5].protocol)
							else
								pInfo:queue("rednet_message", event[5].origin, event[5].payload, 0)
							end
						end
					end
					--dns response
					if event[5].protocol == "dns" and event[5].payload.sType == "lookup" then
						for pID, proc in ipairs(process.list) do
							if proc and proc.rednet and proc.rednet.hosting then
								local hostname = proc.rednet.hosting[event[5].payload.sProtocol]
								if hostname then
									rednet.send(event[4], {sType = "lookup response", sHostname = hostname, sProtocol = event[5].payload.sProtocol}, "dns")
									break
								end
							end
						end
					end
				elseif event[5].destination ~= os.computerID() or event[5].type == "HA" or event[5].type == "HT" or event[5].type == "HI" then
					event[5].side = event[2]
					process.getFromName("netd"):queue("lyqydnet_packet", event[5])
				else
					if net.socketTable[event[5].toSock] then
						if event[5].toSock == 4 then event[5].side = event[2] end
						process.list[pidFromThread(net.socketTable[event[5].toSock])]:queue("lyqydnet_packet", event[5])
					end
				end
			end
		elseif event[1] == "timer" and rnReceivedTimeouts[event[2]] then
			rnReceivedMessages[rnReceivedTimeouts[event[2]]] = nil
			rnReceivedTimeouts[event[2]] = nil
		elseif event[1] == "terminate" then
			return
		end
	end
else
	net.daemonAdd("netd", netDaemon, 4)
	net.netInit()
end
